# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import spvault_pb2 as spvault__pb2


class VaultStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthenticateWithCreds = channel.unary_unary(
                '/spvault.Vault/AuthenticateWithCreds',
                request_serializer=spvault__pb2.AuthRequest.SerializeToString,
                response_deserializer=spvault__pb2.AuthReply.FromString,
                )
        self.AuthenticateWithToken = channel.unary_unary(
                '/spvault.Vault/AuthenticateWithToken',
                request_serializer=spvault__pb2.TokenAuthRequest.SerializeToString,
                response_deserializer=spvault__pb2.AuthReply.FromString,
                )
        self.Register = channel.unary_unary(
                '/spvault.Vault/Register',
                request_serializer=spvault__pb2.RegRequest.SerializeToString,
                response_deserializer=spvault__pb2.RegReply.FromString,
                )
        self.DeRegister = channel.unary_unary(
                '/spvault.Vault/DeRegister',
                request_serializer=spvault__pb2.DeRegRequest.SerializeToString,
                response_deserializer=spvault__pb2.Empty.FromString,
                )


class VaultServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AuthenticateWithCreds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateWithToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VaultServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthenticateWithCreds': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateWithCreds,
                    request_deserializer=spvault__pb2.AuthRequest.FromString,
                    response_serializer=spvault__pb2.AuthReply.SerializeToString,
            ),
            'AuthenticateWithToken': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateWithToken,
                    request_deserializer=spvault__pb2.TokenAuthRequest.FromString,
                    response_serializer=spvault__pb2.AuthReply.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=spvault__pb2.RegRequest.FromString,
                    response_serializer=spvault__pb2.RegReply.SerializeToString,
            ),
            'DeRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.DeRegister,
                    request_deserializer=spvault__pb2.DeRegRequest.FromString,
                    response_serializer=spvault__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spvault.Vault', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Vault(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AuthenticateWithCreds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spvault.Vault/AuthenticateWithCreds',
            spvault__pb2.AuthRequest.SerializeToString,
            spvault__pb2.AuthReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateWithToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spvault.Vault/AuthenticateWithToken',
            spvault__pb2.TokenAuthRequest.SerializeToString,
            spvault__pb2.AuthReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spvault.Vault/Register',
            spvault__pb2.RegRequest.SerializeToString,
            spvault__pb2.RegReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spvault.Vault/DeRegister',
            spvault__pb2.DeRegRequest.SerializeToString,
            spvault__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

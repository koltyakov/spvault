// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthenticatorClient is the client API for Authenticator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticatorClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
}

type authenticatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticatorClient(cc grpc.ClientConnInterface) AuthenticatorClient {
	return &authenticatorClient{cc}
}

func (c *authenticatorClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/spvault.Authenticator/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticatorServer is the server API for Authenticator service.
// All implementations must embed UnimplementedAuthenticatorServer
// for forward compatibility
type AuthenticatorServer interface {
	Authenticate(context.Context, *AuthRequest) (*AuthReply, error)
	mustEmbedUnimplementedAuthenticatorServer()
}

// UnimplementedAuthenticatorServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticatorServer struct {
}

func (UnimplementedAuthenticatorServer) Authenticate(context.Context, *AuthRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthenticatorServer) mustEmbedUnimplementedAuthenticatorServer() {}

// UnsafeAuthenticatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticatorServer will
// result in compilation errors.
type UnsafeAuthenticatorServer interface {
	mustEmbedUnimplementedAuthenticatorServer()
}

func RegisterAuthenticatorServer(s grpc.ServiceRegistrar, srv AuthenticatorServer) {
	s.RegisterService(&_Authenticator_serviceDesc, srv)
}

func _Authenticator_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spvault.Authenticator/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authenticator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spvault.Authenticator",
	HandlerType: (*AuthenticatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Authenticator_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spvault.proto",
}

// RegistratorClient is the client API for Registrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistratorClient interface {
	Register(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegReply, error)
}

type registratorClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistratorClient(cc grpc.ClientConnInterface) RegistratorClient {
	return &registratorClient{cc}
}

func (c *registratorClient) Register(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegReply, error) {
	out := new(RegReply)
	err := c.cc.Invoke(ctx, "/spvault.Registrator/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistratorServer is the server API for Registrator service.
// All implementations must embed UnimplementedRegistratorServer
// for forward compatibility
type RegistratorServer interface {
	Register(context.Context, *RegRequest) (*RegReply, error)
	mustEmbedUnimplementedRegistratorServer()
}

// UnimplementedRegistratorServer must be embedded to have forward compatible implementations.
type UnimplementedRegistratorServer struct {
}

func (UnimplementedRegistratorServer) Register(context.Context, *RegRequest) (*RegReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistratorServer) mustEmbedUnimplementedRegistratorServer() {}

// UnsafeRegistratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistratorServer will
// result in compilation errors.
type UnsafeRegistratorServer interface {
	mustEmbedUnimplementedRegistratorServer()
}

func RegisterRegistratorServer(s grpc.ServiceRegistrar, srv RegistratorServer) {
	s.RegisterService(&_Registrator_serviceDesc, srv)
}

func _Registrator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spvault.Registrator/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServer).Register(ctx, req.(*RegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spvault.Registrator",
	HandlerType: (*RegistratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registrator_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spvault.proto",
}

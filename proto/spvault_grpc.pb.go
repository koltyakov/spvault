// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VaultClient is the client API for Vault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultClient interface {
	AuthenticateWithCreds(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
	AuthenticateWithToken(ctx context.Context, in *TokenAuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
	Register(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegReply, error)
	DeRegister(ctx context.Context, in *DeRegRequest, opts ...grpc.CallOption) (*Empty, error)
}

type vaultClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultClient(cc grpc.ClientConnInterface) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) AuthenticateWithCreds(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/spvault.Vault/AuthenticateWithCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) AuthenticateWithToken(ctx context.Context, in *TokenAuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/spvault.Vault/AuthenticateWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Register(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegReply, error) {
	out := new(RegReply)
	err := c.cc.Invoke(ctx, "/spvault.Vault/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) DeRegister(ctx context.Context, in *DeRegRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/spvault.Vault/DeRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServer is the server API for Vault service.
// All implementations must embed UnimplementedVaultServer
// for forward compatibility
type VaultServer interface {
	AuthenticateWithCreds(context.Context, *AuthRequest) (*AuthReply, error)
	AuthenticateWithToken(context.Context, *TokenAuthRequest) (*AuthReply, error)
	Register(context.Context, *RegRequest) (*RegReply, error)
	DeRegister(context.Context, *DeRegRequest) (*Empty, error)
	mustEmbedUnimplementedVaultServer()
}

// UnimplementedVaultServer must be embedded to have forward compatible implementations.
type UnimplementedVaultServer struct {
}

func (UnimplementedVaultServer) AuthenticateWithCreds(context.Context, *AuthRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithCreds not implemented")
}
func (UnimplementedVaultServer) AuthenticateWithToken(context.Context, *TokenAuthRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithToken not implemented")
}
func (UnimplementedVaultServer) Register(context.Context, *RegRequest) (*RegReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVaultServer) DeRegister(context.Context, *DeRegRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegister not implemented")
}
func (UnimplementedVaultServer) mustEmbedUnimplementedVaultServer() {}

// UnsafeVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServer will
// result in compilation errors.
type UnsafeVaultServer interface {
	mustEmbedUnimplementedVaultServer()
}

func RegisterVaultServer(s grpc.ServiceRegistrar, srv VaultServer) {
	s.RegisterService(&_Vault_serviceDesc, srv)
}

func _Vault_AuthenticateWithCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).AuthenticateWithCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spvault.Vault/AuthenticateWithCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).AuthenticateWithCreds(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_AuthenticateWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).AuthenticateWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spvault.Vault/AuthenticateWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).AuthenticateWithToken(ctx, req.(*TokenAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spvault.Vault/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Register(ctx, req.(*RegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_DeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).DeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spvault.Vault/DeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).DeRegister(ctx, req.(*DeRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spvault.Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateWithCreds",
			Handler:    _Vault_AuthenticateWithCreds_Handler,
		},
		{
			MethodName: "AuthenticateWithToken",
			Handler:    _Vault_AuthenticateWithToken_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Vault_Register_Handler,
		},
		{
			MethodName: "DeRegister",
			Handler:    _Vault_DeRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spvault.proto",
}
